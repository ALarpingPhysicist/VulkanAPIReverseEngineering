#version 430

struct Sphere {
    vec3 center;
    float radius;
    vec3 color;
    float padding;
};

struct Ray {
    vec3 origin;
    vec3 direction;
};

struct HitRecord {
    float t;
    int index;
    bool hit;
};

layout(local_size_x = 8, local_size_y = 8) in;

layout(rgba32f, binding = 0) uniform image2D colorbuffer;
uniform vec3 cameraPos;
uniform vec3 forwards;
uniform vec3 right;
uniform vec3 up;

layout(std430, binding = 1) readonly buffer sphereData {
    Sphere[] spheres;
};
uniform int sphereCount;

const vec3 sunDirection = normalize(vec3(1.0, 1.0, 1.0));

void hit(Ray ray, int sphere_index, inout HitRecord record) {

    Sphere sphere = spheres[sphere_index];

    vec3 oc = ray.origin - sphere.center;
    float a = dot(ray.direction, ray.direction);
    float b = 2 * dot(oc, ray.direction);
    float c = dot(oc, oc) - sphere.radius * sphere.radius;
    float discriminant = b * b - 4 * a * c;

    if (discriminant > 0.0) {

        float t = (-b - sqrt(discriminant)) / (2 * a);

        if (t > 0.0001 && t < record.t) {
            record.t = t;
            record.index = sphere_index;
            record.hit = true;
            return;
        }
    }

    record.hit = false;
}

vec3 trace(inout Ray ray) {

    vec3 color = vec3(0.0);
    
    HitRecord lastHit;
    lastHit.t = 999999999;
    lastHit.index = 0;
    lastHit.hit = false;
    bool hitSomething = false;
    
    
    for (int i = 0; i < sphereCount; i++) {

        hit(ray, i, lastHit);

        hitSomething = hitSomething || lastHit.hit;
    }
        
    if (hitSomething) {

        Sphere sphere = spheres[lastHit.index];

        vec3 hit_pos = ray.origin + lastHit.t * ray.direction;
        vec3 normal = normalize(hit_pos - sphere.center);
        float light_amount = max(0.0, dot(-sunDirection, normal));

        return light_amount * sphere.color;
    }
    else {
        return vec3(0.0);
    }
}

void main() {

    ivec2 pixelPos = ivec2(gl_GlobalInvocationID.xy);
    ivec2 screen_size = imageSize(colorbuffer);
    if (pixelPos.x >= screen_size.x || pixelPos.y >= screen_size.y) {
        return;
    }

    float aspect_ratio = float(screen_size.y) / float(screen_size.x);

    float horizontal_coefficient = (2.0 * pixelPos.x - screen_size.x) / screen_size.x;
    float vertical_coefficient = aspect_ratio * (2.0 * pixelPos.y - screen_size.y) / screen_size.y;

    Ray ray;
    ray.origin = cameraPos;
    ray.direction = normalize(forwards + horizontal_coefficient * right + vertical_coefficient * up);
    
    imageStore(colorbuffer, pixelPos, vec4(trace(ray), 1.0));
}